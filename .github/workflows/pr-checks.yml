name: PR Checks

on:
  pull_request:
    branches: [main, master]
  push:
    branches: [main, master]

jobs:
  setup:
    name: Setup Dependencies
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
    
    - name: Install monorepo dependencies
      run: bun install
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          node_modules
          apps/*/node_modules  
          packages/*/node_modules
        key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock', '**/package.json') }}
        restore-keys: |
          ${{ runner.os }}-bun-

  mobile-checks:
    name: Mobile App Checks
    runs-on: ubuntu-latest
    needs: setup
    defaults:
      run:
        working-directory: apps/mobile
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js (for npx compatibility)
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
    
    - name: Restore dependencies cache
      uses: actions/cache@v3
      with:
        path: |
          node_modules
          apps/*/node_modules
          packages/*/node_modules  
        key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock', '**/package.json') }}
        restore-keys: |
          ${{ runner.os }}-bun-
    
    - name: Install dependencies (if cache miss)
      run: cd ../.. && bun install
    
    - name: Verify workspace dependencies
      run: |
        echo "üì¶ Checking workspace dependencies..."
        ls -la ../../packages/
        echo "üì¶ Checking mobile node_modules..."
        ls -la node_modules/@coachmeld/ || echo "‚ö†Ô∏è Workspace packages not linked yet"
    
    - name: TypeScript check
      run: |
        echo "üîç Running TypeScript check for mobile app..."
        # Use npx to ensure proper resolution in monorepo with fallback
        npx tsc --noEmit --skipLibCheck || {
          echo "‚ùå TypeScript check failed. Checking TypeScript installation..."
          which tsc
          tsc --version
          exit 1
        }
    
    - name: Check for console.log statements
      run: |
        if grep -r "console\.log" src/ --exclude-dir=node_modules --include="*.ts" --include="*.tsx"; then
          echo "‚ùå Found console.log statements. Please remove them before merging."
          exit 1
        else
          echo "‚úÖ No console.log statements found."
        fi
    
    - name: Check for sensitive data
      run: |
        if grep -r -i "password\|secret\|key\|token" src/ --exclude-dir=node_modules --include="*.ts" --include="*.tsx" | grep -v "// @ts-ignore" | grep -v "password:" | grep -v "keyboardType" | grep -v "secureTextEntry"; then
          echo "‚ùå Potential sensitive data found. Please review."
          exit 1
        else
          echo "‚úÖ No obvious sensitive data found."
        fi
    
    - name: Build check (web export)
      run: bun expo export --platform web
      env:
        EXPO_NO_TELEMETRY: 1

  admin-checks:
    name: Admin App Checks  
    runs-on: ubuntu-latest
    needs: setup
    defaults:
      run:
        working-directory: apps/admin
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js (for npx compatibility)
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
    
    - name: Restore dependencies cache
      uses: actions/cache@v3
      with:
        path: |
          node_modules
          apps/*/node_modules
          packages/*/node_modules
        key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock', '**/package.json') }}
        restore-keys: |
          ${{ runner.os }}-bun-
    
    - name: Install dependencies (if cache miss)
      run: cd ../.. && bun install
    
    - name: TypeScript check
      run: |
        echo "üîç Running TypeScript check for admin app..."
        npx tsc --noEmit --skipLibCheck
    
    - name: Next.js build check
      run: bun run build
      env:
        NEXT_TELEMETRY_DISABLED: 1

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: setup
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1  
      with:
        bun-version: latest
    
    - name: Install dependencies
      run: bun install
    
    - name: Audit dependencies with Bun
      run: |
        echo "üîç Checking for known vulnerabilities in dependencies..."
        # Bun doesn't have audit command yet, but we can check for known issues
        bun install --dry-run --verbose
        echo "‚úÖ Dependency check completed"